// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: lookupwatch/v1/lookupwatch.proto

package lookupwatchv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LookupWatchServiceClient is the client API for LookupWatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LookupWatchServiceClient interface {
	WatchAccessibleResources(ctx context.Context, in *WatchAccessibleResourcesRequest, opts ...grpc.CallOption) (LookupWatchService_WatchAccessibleResourcesClient, error)
}

type lookupWatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLookupWatchServiceClient(cc grpc.ClientConnInterface) LookupWatchServiceClient {
	return &lookupWatchServiceClient{cc}
}

func (c *lookupWatchServiceClient) WatchAccessibleResources(ctx context.Context, in *WatchAccessibleResourcesRequest, opts ...grpc.CallOption) (LookupWatchService_WatchAccessibleResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &LookupWatchService_ServiceDesc.Streams[0], "/lookupwatch.v1.LookupWatchService/WatchAccessibleResources", opts...)
	if err != nil {
		return nil, err
	}
	x := &lookupWatchServiceWatchAccessibleResourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LookupWatchService_WatchAccessibleResourcesClient interface {
	Recv() (*WatchAccessibleResourcesResponse, error)
	grpc.ClientStream
}

type lookupWatchServiceWatchAccessibleResourcesClient struct {
	grpc.ClientStream
}

func (x *lookupWatchServiceWatchAccessibleResourcesClient) Recv() (*WatchAccessibleResourcesResponse, error) {
	m := new(WatchAccessibleResourcesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LookupWatchServiceServer is the server API for LookupWatchService service.
// All implementations must embed UnimplementedLookupWatchServiceServer
// for forward compatibility
type LookupWatchServiceServer interface {
	WatchAccessibleResources(*WatchAccessibleResourcesRequest, LookupWatchService_WatchAccessibleResourcesServer) error
	mustEmbedUnimplementedLookupWatchServiceServer()
}

// UnimplementedLookupWatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLookupWatchServiceServer struct {
}

func (UnimplementedLookupWatchServiceServer) WatchAccessibleResources(*WatchAccessibleResourcesRequest, LookupWatchService_WatchAccessibleResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchAccessibleResources not implemented")
}
func (UnimplementedLookupWatchServiceServer) mustEmbedUnimplementedLookupWatchServiceServer() {}

// UnsafeLookupWatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LookupWatchServiceServer will
// result in compilation errors.
type UnsafeLookupWatchServiceServer interface {
	mustEmbedUnimplementedLookupWatchServiceServer()
}

func RegisterLookupWatchServiceServer(s grpc.ServiceRegistrar, srv LookupWatchServiceServer) {
	s.RegisterService(&LookupWatchService_ServiceDesc, srv)
}

func _LookupWatchService_WatchAccessibleResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchAccessibleResourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LookupWatchServiceServer).WatchAccessibleResources(m, &lookupWatchServiceWatchAccessibleResourcesServer{stream})
}

type LookupWatchService_WatchAccessibleResourcesServer interface {
	Send(*WatchAccessibleResourcesResponse) error
	grpc.ServerStream
}

type lookupWatchServiceWatchAccessibleResourcesServer struct {
	grpc.ServerStream
}

func (x *lookupWatchServiceWatchAccessibleResourcesServer) Send(m *WatchAccessibleResourcesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// LookupWatchService_ServiceDesc is the grpc.ServiceDesc for LookupWatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LookupWatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lookupwatch.v1.LookupWatchService",
	HandlerType: (*LookupWatchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchAccessibleResources",
			Handler:       _LookupWatchService_WatchAccessibleResources_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lookupwatch/v1/lookupwatch.proto",
}
